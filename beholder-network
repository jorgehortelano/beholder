#!/usr/bin/env python
__version__ = "0.1"
__author__ = "Jorge Hortelano"

import sys, argparse, yowsup, logging

logger = logging.getLogger("yowsup-commandserver")

class YowArgParser(argparse.ArgumentParser):
    def __init__(self, *args, **kwargs):
        super(YowArgParser, self).__init__(*args, **kwargs)
        self.add_argument("-v", "--version",
            action = "store_true",
            help = "Print version info and exit"
        )

        self.add_argument("-d", "--debug",
            action = "store_true",
            help = "Show debug messages"
        )

        self.args = {}
    def getArgs(self):
        return self.parse_args()

    def getConfig(self, config):
        try:
            f = open(config)
            out = {}
            for l in f:
                line = l.strip()
                if len(line) and line[0] not in ('#',';'):
                    prep = line.split('#', 1)[0].split(';', 1)[0].split('=', 1)
                    varname = prep[0].strip()
                    val = prep[1].strip()
                    out[varname.replace('-', '_')] = val
            return out
        except IOError:
            print("Invalid config path: %s" % config)
            sys.exit(1)

    def process(self):
        self.args = vars(self.parse_args())
        if self.args["version"]:
            print("yowsup-commandserver v%s\nUsing yowsup v%s" % (__version__, yowsup.__version__))
            sys.exit(0)

        if self.args["debug"]:
            logging.basicConfig(level = logging.DEBUG)
        else:
            logging.basicConfig(level = logging.INFO)

class BeholderArgParser(YowArgParser):
    def __init__(self, *args, **kwargs):
        super(BeholderArgParser, self).__init__(*args, **kwargs)
        self.description = "Run a yowsup-commandserver"

        configGroup = self.add_argument_group("Configuration options for demos")
        credentialsOpts = configGroup.add_mutually_exclusive_group()
        credentialsOpts.add_argument("-l", "--login", action="store", metavar="phone:b64password",
                                     help = "WhatsApp login credentials, in the format phonenumber:password, where password is base64 encoded.")
        credentialsOpts.add_argument("-c", "--config", action="store",
                                     help = "Path to config file containing authentication info. For more info about config format use --help-config")

        configGroup.add_argument("-M", "--unmoxie", action="store_true", help="Disable E2E Encryption")

    def process(self):
        super(BeholderArgParser, self).process()
        self.startCommandServer()

    def _getCredentials(self):
        if self.args["login"]:
            return tuple(self.args["login"].split(":"))
        elif self.args["config"]:
            config = self.getConfig(self.args["config"])
            assert "password" in config and "phone" in config, "Must specify at least phone number and password in config file"
            return config["phone"], config["password"]
        else:
            return None

    def _getAllowedUsers(self):
        if self.args["config"]:
            config = self.getConfig(self.args["config"])
            assert "allowed_users" in config, "Must specify at least one allowed user in config file"
            return config["allowed_users"]
        else:
            return None
    def _getAlias(self):
        if self.args["config"]:
            config = self.getConfig(self.args["config"])
            assert "alias" in config, "Must specify the alias of this device!"
            return config["alias"]
        else:
            return None

    def startCommandServer(self):
        from yowsup_ext import commandserver
        from yowsup_ext.beholdernetwork.stack import BeholderStack
        credentials = self._getCredentials()
        allowed_users =  self._getAllowedUsers()
        alias = self._getAlias()
        
        if not credentials:
            print("Error: You must specify a configuration method")
            sys.exit(1)
        if not allowed_users:
            print("Error: Must specify at least one allowed user in config file")
            sys.exit(1)
        if not alias:
            print("Error: Must specify the alias of this device in config file")
            sys.exit(1)
        try:
            stack = BeholderStack(credentials, allowed_users, alias, not self.args["unmoxie"])
            stack.start()
        except KeyboardInterrupt:
            print("\n"+ alias +" down")
            sys.exit(0)

if __name__ == "__main__":
    args = sys.argv
    if(len(args) > 1):
        del args[0]

    modeDict = {
        "run":        BeholderArgParser,
        "version":      None
    }

    if(len(args) == 0 or args[0] not in modeDict):
        print("Available commands:\n===================")
        print(", ".join(modeDict.keys()))

        sys.exit(1)

    mode = args[0]
    if mode == "version":
        print("beholder-network v%s\nUsing yowsup v%s" % (__version__, yowsup.__version__))
        sys.exit(0)
    else:
        parser = modeDict[mode]()
        if not parser.process():
            parser.print_help()
